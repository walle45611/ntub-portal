/* tslint:disable */
/* eslint-disable */
/**
 * NTUB-AUTH-SERVER API
 * 北商大認證伺服器 API
 *
 * The version of the OpenAPI document: v1
 * Contact: 11146001@ntub.edu.tw
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Login200Response
 */
export interface Login200Response {
    /**
     * JWT access token
     * @type {string}
     * @memberof Login200Response
     */
    'access'?: string;
    /**
     * User ID
     * @type {number}
     * @memberof Login200Response
     */
    'user_id'?: number;
}
/**
 * 
 * @export
 * @interface Refresh200Response
 */
export interface Refresh200Response {
    /**
     * 新的JWT存取權杖
     * @type {string}
     * @memberof Refresh200Response
     */
    'access'?: string;
}
/**
 * 
 * @export
 * @interface Register200Response
 */
export interface Register200Response {
    /**
     * 
     * @type {Register200ResponseUser}
     * @memberof Register200Response
     */
    'user'?: Register200ResponseUser;
}
/**
 * 
 * @export
 * @interface Register200ResponseUser
 */
export interface Register200ResponseUser {
    /**
     * Username
     * @type {string}
     * @memberof Register200ResponseUser
     */
    'username'?: string;
    /**
     * Email
     * @type {string}
     * @memberof Register200ResponseUser
     */
    'email'?: string;
    /**
     * First Name
     * @type {string}
     * @memberof Register200ResponseUser
     */
    'first_name'?: string;
    /**
     * Last Name
     * @type {string}
     * @memberof Register200ResponseUser
     */
    'last_name'?: string;
}
/**
 * 
 * @export
 * @interface UserLogin
 */
export interface UserLogin {
    /**
     * 
     * @type {string}
     * @memberof UserLogin
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserLogin
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserRegistration
 */
export interface UserRegistration {
    /**
     * 必要的。150 個字或更少，只包含字母、數字和 @/./+/-/_。
     * @type {string}
     * @memberof UserRegistration
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistration
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistration
     */
    'password2': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistration
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistration
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistration
     */
    'last_name': string;
}
/**
 * 
 * @export
 * @interface VerifyGoogleToken200Response
 */
export interface VerifyGoogleToken200Response {
    /**
     * 
     * @type {string}
     * @memberof VerifyGoogleToken200Response
     */
    'access_token'?: string;
    /**
     * User ID
     * @type {number}
     * @memberof VerifyGoogleToken200Response
     */
    'user_id'?: number;
}
/**
 * 
 * @export
 * @interface VerifyGoogleTokenRequest
 */
export interface VerifyGoogleTokenRequest {
    /**
     * Access Token
     * @type {string}
     * @memberof VerifyGoogleTokenRequest
     */
    'access_token'?: string;
}

/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserLogin} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (data: UserLogin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('login', 'data', data)
            const localVarPath = `/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserLogin} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(data: UserLogin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {UserLogin} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(data: UserLogin, options?: any): AxiosPromise<Login200Response> {
            return localVarFp.login(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {UserLogin} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public login(data: UserLogin, options?: RawAxiosRequestConfig) {
        return LoginApiFp(this.configuration).login(data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RefreshApi - axios parameter creator
 * @export
 */
export const RefreshApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefreshApi - functional programming interface
 * @export
 */
export const RefreshApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefreshApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Refresh200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefreshApi.refresh']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RefreshApi - factory interface
 * @export
 */
export const RefreshApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefreshApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(options?: any): AxiosPromise<Refresh200Response> {
            return localVarFp.refresh(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefreshApi - object-oriented interface
 * @export
 * @class RefreshApi
 * @extends {BaseAPI}
 */
export class RefreshApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefreshApi
     */
    public refresh(options?: RawAxiosRequestConfig) {
        return RefreshApiFp(this.configuration).refresh(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RegisterApi - axios parameter creator
 * @export
 */
export const RegisterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserRegistration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (data: UserRegistration, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('register', 'data', data)
            const localVarPath = `/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegisterApi - functional programming interface
 * @export
 */
export const RegisterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegisterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserRegistration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(data: UserRegistration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Register200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegisterApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RegisterApi - factory interface
 * @export
 */
export const RegisterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegisterApiFp(configuration)
    return {
        /**
         * 
         * @param {UserRegistration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(data: UserRegistration, options?: any): AxiosPromise<Register200Response> {
            return localVarFp.register(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
export class RegisterApi extends BaseAPI {
    /**
     * 
     * @param {UserRegistration} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public register(data: UserRegistration, options?: RawAxiosRequestConfig) {
        return RegisterApiFp(this.configuration).register(data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VerifyGoogleTokenApi - axios parameter creator
 * @export
 */
export const VerifyGoogleTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VerifyGoogleTokenRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyGoogleToken: async (data: VerifyGoogleTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('verifyGoogleToken', 'data', data)
            const localVarPath = `/verify-google-token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerifyGoogleTokenApi - functional programming interface
 * @export
 */
export const VerifyGoogleTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerifyGoogleTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {VerifyGoogleTokenRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyGoogleToken(data: VerifyGoogleTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyGoogleToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyGoogleToken(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VerifyGoogleTokenApi.verifyGoogleToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VerifyGoogleTokenApi - factory interface
 * @export
 */
export const VerifyGoogleTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerifyGoogleTokenApiFp(configuration)
    return {
        /**
         * 
         * @param {VerifyGoogleTokenRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyGoogleToken(data: VerifyGoogleTokenRequest, options?: any): AxiosPromise<VerifyGoogleToken200Response> {
            return localVarFp.verifyGoogleToken(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VerifyGoogleTokenApi - object-oriented interface
 * @export
 * @class VerifyGoogleTokenApi
 * @extends {BaseAPI}
 */
export class VerifyGoogleTokenApi extends BaseAPI {
    /**
     * 
     * @param {VerifyGoogleTokenRequest} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyGoogleTokenApi
     */
    public verifyGoogleToken(data: VerifyGoogleTokenRequest, options?: RawAxiosRequestConfig) {
        return VerifyGoogleTokenApiFp(this.configuration).verifyGoogleToken(data, options).then((request) => request(this.axios, this.basePath));
    }
}



